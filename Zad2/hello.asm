extern clock_gettime	
extern _localtime
extern printf
section .data

NR_read  equ 0
NR_write equ 1
NR_open  equ 2
NR_close equ 3

O_RDONLY equ 000000q



myHigh db 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40 
myLow  db 0x00, 0xc0, 0xc1, 0x01, 0xc3, 0x03, 0x02, 0xc2, 0xc6, 0x06, 0x07, 0xc7, 0x05, 0xc5, 0xc4, 0x04, 0xcc, 0x0c, 0x0d, 0xcd, 0x0f, 0xcf, 0xce, 0x0e, 0x0a, 0xca, 0xcb, 0x0b, 0xc9, 0x09, 0x08, 0xc8, 0xd8, 0x18, 0x19, 0xd9, 0x1b, 0xdb, 0xda, 0x1a, 0x1e, 0xde, 0xdf, 0x1f, 0xdd, 0x1d, 0x1c, 0xdc, 0x14, 0xd4, 0xd5, 0x15, 0xd7, 0x17, 0x16, 0xd6, 0xd2, 0x12, 0x13, 0xd3, 0x11, 0xd1, 0xd0, 0x10, 0xf0, 0x30, 0x31, 0xf1, 0x33, 0xf3, 0xf2, 0x32, 0x36, 0xf6, 0xf7, 0x37, 0xf5, 0x35, 0x34, 0xf4, 0x3c, 0xfc, 0xfd, 0x3d, 0xff, 0x3f, 0x3e, 0xfe, 0xfa, 0x3a, 0x3b, 0xfb, 0x39, 0xf9, 0xf8, 0x38, 0x28, 0xe8, 0xe9, 0x29, 0xeb, 0x2b, 0x2a, 0xea, 0xee, 0x2e, 0x2f, 0xef, 0x2d, 0xed, 0xec, 0x2c, 0xe4, 0x24, 0x25, 0xe5, 0x27, 0xe7, 0xe6, 0x26, 0x22, 0xe2, 0xe3, 0x23, 0xe1, 0x21, 0x20, 0xe0, 0xa0, 0x60, 0x61, 0xa1, 0x63, 0xa3, 0xa2, 0x62, 0x66, 0xa6, 0xa7, 0x67, 0xa5, 0x65, 0x64, 0xa4, 0x6c, 0xac, 0xad, 0x6d, 0xaf, 0x6f, 0x6e, 0xae, 0xaa, 0x6a, 0x6b, 0xab, 0x69, 0xa9, 0xa8, 0x68, 0x78, 0xb8, 0xb9, 0x79, 0xbb, 0x7b, 0x7a, 0xba, 0xbe, 0x7e, 0x7f, 0xbf, 0x7d, 0xbd, 0xbc, 0x7c, 0xb4, 0x74, 0x75, 0xb5, 0x77, 0xb7, 0xb6, 0x76, 0x72, 0xb2, 0xb3, 0x73, 0xb1, 0x71, 0x70, 0xb0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9c, 0x5c, 0x5d, 0x9d, 0x5f, 0x9f, 0x9e, 0x5e, 0x5a, 0x9a, 0x9b, 0x5b, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4b, 0x8b, 0x8a, 0x4a, 0x4e, 0x8e, 0x8f, 0x4f, 0x8d, 0x4d, 0x4c, 0x8c, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 



fileName db "data.txt",0 ;
FD       dq 0 ; descriptor

bufIn    db 0x401 dup 0
space	 db 10,13
dataBin  db 0x111 dup 0
dataLen	 db 0

bufferlen equ 0x400
buf2     db 20 dup 0
fstart     db   10,13,"start: %d",10,13,0
fend       db   "stop : %d",10,13,0
fdelta     db   "delta: %d",10,13,0
fcycles    db   "cykli: %d",10,13,0
fresult    db   "result: 0x%X",10,13,0

crcHigh	   db   0xff;
crcLow	   db   0xff;


counter	   dq 0
now		   db "    ",0



success_Read db 10,13,"OK!",10,13,0

msg db 10,13 , "wczytuje plik: data.txt", 10,13,0



section .text
global main
main:

	; args
	;mov ecx, [esp+4] ; argc
	;mov edx, [esp+8] ; argv

	mov rsi, qword [rsi+r8+8] ; argv
	
	mov rax, 0
	call parseParam ; rsi to rax
	mov r15,rax
	
	mov rsi, buf2
	mov [rsi], rax
	
	call printString








	mov rsi, msg
	call printString
	
	; open file
	mov rdi,fileName
	call openFile
	
	; save descriptor
	mov qword [FD], rax
	
	; read file
	mov rdi, qword [FD]
	mov rsi, bufIn
	mov rdx, bufferlen
	call readFile

	; close fileHigh
	mov rdi, qword [FD]	
	call closeFile
	
	; parse to binary
	call parseFile

	; print dataIn
	mov rsi, bufIn
	call printString

	; print
	mov rsi, space
	call printString


	mov rax,0
	mov rdi, fcycles
	mov rsi,r15
	call printf


	; start time
	

    call timeToAX
    mov r13, rax


	mov rax,0
	mov rdi, fstart
	mov rsi,r13
	call printf



		call CRC  

	; end time
	call timeToAX
    mov r14, rax

	mov rax,0
	mov rdi, fstart
	mov rsi,r14
	call printf
	
	; delta
	sub r14,r13
	mov rax,0
	mov rdi, fdelta
	mov rsi,r14
	call printf
	
	
	call exit
ret










; close file
mov rdi, qword[FD]
call closeFile

ret

;

















global printString ; rsi <= stringAddress
printString:
    ; rsi msg addres
	mov r12,rsi
	mov rdx,0

	strLoop:
	   cmp byte[r12],0
	   je loopEnd;
	   inc rdx
	   inc r12
	   jmp strLoop	
	   
	loopEnd:
	mov rax,1 ; print
	mov rdi,1 ; to std_out
	syscall

ret





global exit
exit:
	mov rax,60
	mov rdi,0
	syscall

ret
	
	
; ---- funkcje manipulujace plikiem
; ---------------------------------


global readFile
readFile:
	mov rax, NR_read
	syscall
ret

; ---


global openFile
openFile:
	mov rax, NR_open
	mov rsi, O_RDONLY
	syscall
ret


global closeFile
closeFile:
	mov rax,NR_close
	syscall
ret


global parseFile ; 	mov rsi, bufIn
parseFile:
	
	mov rsi, bufIn 
	mov rdi, dataBin
	
	parseChar:
		mov ax,0
		cmp byte [rsi],0
		je parseEnd
		
		call charToInt
		inc rsi
		
		call charToInt
		inc rsi
		mov byte[rdi],al
		inc rdi
		inc rsi
		jmp parseChar
	
	parseEnd:
	
	


parseFileLoop:


ret 



global charToInt ; char [rsi]
charToInt:
	cmp byte[rsi],0x30
	je loop0
	
	cmp byte[rsi],0x31
	je loop1

	cmp byte[rsi],0x32
	je loop2

	cmp byte[rsi],0x33
	je loop3

	cmp byte[rsi],0x34
	je loop4
	
	cmp byte[rsi],0x35
	je loop5

	cmp byte[rsi],0x36
	je loop6

	cmp byte[rsi],0x37
	je loop7
	
	cmp byte[rsi],0x38
	je loop8
	
	cmp byte[rsi],0x39
	je loop9

	cmp byte[rsi],0x41
	je loopa

	cmp byte[rsi],0x61
	je loopa
	
	cmp byte[rsi],0x42
	je loopb
	
	cmp byte[rsi],0x62
	je loopb

	cmp byte[rsi],0x43
	je loopc

	cmp byte[rsi],0x63
	je loopc
	
	cmp byte[rsi],0x44
	je loop_d
	
	cmp byte[rsi],0x64
	je loop_d

	cmp byte[rsi],0x45
	je loop_e

	cmp byte[rsi],0x65
	je loop_e
	
	cmp byte[rsi],0x46
	je loopf
	
	cmp byte[rsi],0x66
	je loopf

	ret
	
	loop0:
	shl ax,4
	add ax,0
	ret

	loop1:
	shl ax,4	
	add ax,1
	ret
	
	loop2:
	shl ax,4	
	add ax,2
	ret
	
	loop3:
	shl ax,4	
	add ax,3
	ret

	loop4:
	shl ax,4	
	add ax,4
	ret
	
	loop5:
	shl ax,4	
	add ax,5
	ret
	
	loop6:
	shl ax,4	
	add ax,6
	ret
	
	loop7:
	shl ax,4	
	add ax,7
	ret
	
	loop8:
	shl ax,4	
	add ax,8
	ret
	
	loop9:
	shl ax,4	
	add ax,9
	ret
	
	loopa:
	shl ax,4	
	add ax,0x0a
	ret
	
	loopb:
	shl ax,4	
	add ax,0x0b
	ret
	
	loopc:
	shl ax,4	
	add ax,0x0c
	ret
	
	loop_d:
	shl ax,4	
	add ax,0x0d	
	ret
	
	loop_e:
	shl ax,4	
	add ax,0x0e
	ret
	
	loopf:
	shl ax,4	
	add ax,0x0f
	ret

ret


global parseParam ; rsi
parseParam:

	mov rax, 0
	mov cx,0x0a
	
	parseParamLoop:
		cmp byte[rsi],0
		je 	parseParamEnd
		cmp byte[rsi],20
		je 	parseParamEnd
	
	mov rbx,0
	mov bl, byte[rsi]
	sub bl, 0x030
	mul cx
	add rax,rbx
	inc rsi
	jmp parseParamLoop
	
	parseParamEnd:

	mov [counter],rax

ret


global CRC
CRC:

	; check len of binaryData
	mov rax, dataBin
	mov ch,0 
	dec rax
	dec ch
	 lenLoop:
	 inc rax
	 inc ch
	 cmp byte [rax],0
	 jne lenLoop	
	mov byte[ dataLen ], ch
	mov rax,0

 
    ; ch <- length	
	; ax  <- HiByte = 0xff
	; al  <- LoByte = 0xff
	; message[i] <- [dataBin+rdx]
	 
	


	; R15 - loop len
	; 10^6 loop
	
	CRCLoops:
	mov ah, 0xff
	mov al, 0xff
	mov rbx , dataBin ; Message
	mov ch, [ dataLen ]
	inc ch
	mov rdx,0

		; CRC !!!
		oneCRC:
	
		mov R9B, byte [rbx]   ; dh = *pMessage
			 inc rbx    ; Message++
		mov dl, ah      ; index = HiByte ^ *pMessage
		xor dl, R9B		; index = dl			     	;		Index  = HiByte ^ *pMessage++; 
		
		
		mov ah,byte [ myHigh + rdx]
		xor ah,al		;		HiByte = LoByte ^ aCRCHi[Index];
		
		mov al,byte [ myLow + rdx ]
						;		LoByte = aCRCLo[Index]; 

		dec ch
		jnz oneCRC
		; CRC !!
		; HiByte = AH
		; LoByte = AL
		; Result = AX
		;		return (HiByte << 8 | LoByte); 
		
	; / 10^6 loop	
	dec r15
	jnz CRCLoops
	
	; print result
	mov rdi, fresult
	mov rsi,rax
	mov rax,0
	call printf
	
	
ret

 
 
global timeToAX
timeToAX:

	call clock_gettime
mov rax,rdi
;	push rdi
;	mov rax, 201
;	xor rdi, rdi        
;	syscall
;	pop rdi
ret 